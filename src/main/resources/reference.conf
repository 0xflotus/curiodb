
curiodb {

  // Addresses listening for clients.
  listen = [
    "tcp://127.0.0.1:6379"    // TCP server using Redis protocol.
    "http://127.0.0.1:2600"   // HTTP server using JSON.
    "ws://127.0.0.1:6200"     // WebSocket server, also using JSON.
  ]

  persist-after = 1 second    // Like "save" in Redis.
  sleep-after   = 10 seconds  // Virtual memory threshold.
  node          = node1       // Current cluster node (from the
                              // "nodes" keys below).
  // Cluster nodes.
  nodes = {
    node1: "tcp://127.0.0.1:9001"
    // node2: "tcp://127.0.0.1:9002"
    // node3: "tcp://127.0.0.1:9003"
  }

  // List of disabled commands.
  commands.disabled = [SHUTDOWN]

  // HyperLogLog tunables.
  hyperloglog = {
    register-log = 30
    register-width = 8
  }

}

akka {

  // Logging.
  loglevel = INFO
  actor.debug.receive = on
  actor.debug.autoreceive = on
  actor.debug.event-stream = on
  actor.debug.lifecycle = on

  // Persistence.
  persistence.journal.plugin = akka.persistence.journal.inmem
  persistence.snapshot-store.plugin = akka.persistence.snapshot-store.local
  persistence.snapshot-store.local.dir = "target/snapshots"
  persistence.snapshot-store.local.class = "curiodb.LocalSnapshotStore"

  jvm-exit-on-fatal-error = off
  actor.default-mailbox.mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"

  // Cluster.
  actor.provider = akka.cluster.ClusterActorRefProvider
  actor.deployment./keys {
    router = consistent-hashing-pool
    cluster.allow-local-routees = on
    cluster.max-nr-of-instances-per-node = 10
    cluster.enabled = on
  }

}

// HTTP server.
spray.can {
  server.server-header = CurioDB
  server.stats-support = off
  parsing.illegal-header-warnings = off
}
